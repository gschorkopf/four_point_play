<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Four-Point Play]]></title>
  <link href="http://four-point-play.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://four-point-play.herokuapp.com/"/>
  <updated>2014-05-15T12:05:10-04:00</updated>
  <id>http://four-point-play.herokuapp.com/</id>
  <author>
    <name><![CDATA[Logesh and Geoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring Complex Validations From Your Models]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/10/refactoring-complex-validations-from-your-models/"/>
    <updated>2014-05-10T18:55:24-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/10/refactoring-complex-validations-from-your-models</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve probably heard the phrase &ldquo;fat models, skinny controllers&rdquo; before. The misconception of &ldquo;fat models&rdquo;: that it&rsquo;s okay for models to be very large and unwieldy. But when Rails models become a dumping ground for all things even tangentially related to the original class, it&rsquo;s probably time to trim off a few pounds.</p>

<!--more-->


<p>One way to do that is to pare away complex validations. For example, you might think it wise to drum up a method or two to handle passwords (minimum 8 characters! minimum one number! no weird symbols! etc.) So you throw these methods into the private domain of your User class, and call it a day. But you can (and should) probably move that logic elsewhere.</p>

<p>Let&rsquo;s start with what not to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:password_complexity</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_password_complexity</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have a number&quot;</span><span class="p">)</span>              <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*\d)/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have a lowercase letter&quot;</span><span class="p">)</span>    <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*[a-z])/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have an uppercase letter&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*[A-Z])/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have a special character&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*[\W])/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have at least 8 characters&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">password</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s fine. It works. But is password complexity really the User&rsquo;s responsibilty? What if you had an Admin or Account or Enterprise model that required some sort of password? Surely you wouldn&rsquo;t <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">duplicate</a> your efforts there?</p>

<p>So let&rsquo;s simplify our User model down to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">complexity</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. Such elegant. Very simplicity. <a href="http://knowyourmeme.com/memes/doge">Amaze.</a></p>

<p>But how does this <code>complexity: true</code> work? Behind the scenes, we hide away that original logic that&rsquo;s not even really related to a User. You can inherit from the ActiveModel::EachValidator class, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/validators/complexity_validator.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ComplexityValidator</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:EachValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_each</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">attribute</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have a number&quot;</span><span class="p">)</span>              <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*\d)/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have a lowercase letter&quot;</span><span class="p">)</span>    <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*[a-z])/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have an uppercase letter&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*[A-Z])/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have a special character&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*[\W])/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have at least 8 characters&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a bit of Rails magic here. The &ldquo;Complexity&rdquo; title knows to create a complexity argument. Recall the User model line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">complexity</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s as easy as that!</p>

<p>And to tidy things up on the view end, consider the following for error handling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/users/new.html.erb</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s2">&quot;New Password&quot;</span><span class="p">,</span> <span class="n">error_method</span><span class="p">:</span> <span class="ss">:to_sentence</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>to_sentence is built into ActiveSupport, and helps us show all errors in a user-friendly way. <a href="http://apidock.com/rails/ActiveSupport/CoreExtensions/Array/Conversions/to_sentence">Check it out</a>.</p>

<p>Shout out to <a href="https://twitter.com/brandon_beacher">Brandon Beacher</a>, who taught me this nifty piece of refactoring.</p>

<ul>
<li>GPS</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Movie Review: Lola Versus]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/06/movie-review-lola-versus/"/>
    <updated>2014-05-06T19:06:00-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/06/movie-review-lola-versus</id>
    <content type="html"><![CDATA[<p>Director: Daryl Wein<br/>
Runtime: 87 minutes<br/>
Cast: Greta Gerwig, Hamish Linklater, Zoe Lister-Jones<br/></p>

<!--more-->


<p>This hidden gem has been lying on my coffee table for two months after I picked it up for under five bucks at my local video store. It was part of a double feature purchase which also included Evil Dead, to be reviewed shortly. The sole reason it caught my eye was because of Ms. Gerwig’s mesmerizing performance as <a href="http://en.wikipedia.org/wiki/Frances_Ha">Frances Ha</a>’s titular heroine in one of the best movies of 2012. Director and co-writer Noah Baumbach left his wife and child during this collaboration, so it’s not just me that is caught in her magnetic field. And she will go on to reboot the How I Met Your Mother franchise by drudging through the story of HSMHH in HIMYD. HIMYM is one of my favorite sitcoms,  dare I say the Friends of my generation, and it has been endlessly renewed past its expiration date. Part of the reason, I presume, the finale felt so foreign to many viewers. My opinion, I loved how they ended things. But, it does a lot to sooth my anxieites that this spinoff will be anchored by this capable, indie star.</p>

<p>Before all her recent success, this film showcased her remarkable talent. It centers around the year between her 29th and 30th birthday, no small time in anyone’s life. She is joined in NYC by romantic interest Luke (Joel Kinnaman), best friend Alice (Zoe Lister Jones), and male-best-friend-who-obviously-has-a-crush-on-her Henry (Hamish Linklater!). You&rsquo;ve watched enough romantic comedies to know where this is going. She ends up with the more compatible best friend after making a few mistakes along the way. The writers refreshingly barrel through plot points to arrive at that ending halfway through the movie. This would not have worked without the splendid ability of these actors to develop a quick, believable chemistry. The relationships are strained mainly due to the reluctance of these characters to communicate, all coming to culmination in a nervous breakdown. The strength of this film comes on the comedic half of its pursuits. The dialogue is clever and fresh, helped tremendously by the delivery of Gerwig and crew. Pay attention to the set pieces too, if you&rsquo;ve ever wondered what a happenstance prison architect has on his walls. If you like to complain about how Hollywood can&rsquo;t make a comedic film with female leads, check this one out.</p>

<p>While we get some fun situations in the story of Lola dealing with the stresses of her romantic life, I am left wondering why she constantly befuddles her own attempts at growth. It seems to be assumed that this how women her age in this culture deal with life. Her stagnation turns quickly into frustration for the viewer who has learned the lessons that romantic comedies have to teach us. &ldquo;You’re making all the classic mistakes!&rdquo;, you want to yell at the hapless girl. Her parents&#8217; sage advice is the proxy for the omniscient viewer, which Lola promptly ignores in the scenes after they disappear. As she showed in the far superior, Frances Ha, which revolves around the same topics, one can mine the depths of the relationships between friends and lovers, while still being funny. I am scared that CBS execs saw this movie and thought that we could get Greta Gerwig easily drag out her romantic growth through 9 seasons as she did through this hour-and-a-half movie. It is a waste of her talent, but good exploitation of her appeal.</p>

<blockquote><p>“Whatever, chicks love old phones. They think I listen more or something.”</p></blockquote>

<p>-I.I.</p>
]]></content>
  </entry>
  
</feed>
