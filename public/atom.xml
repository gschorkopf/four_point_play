<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Four-Point Play]]></title>
  <link href="http://four-point-play.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://four-point-play.herokuapp.com/"/>
  <updated>2014-09-23T18:32:07-04:00</updated>
  <id>http://four-point-play.herokuapp.com/</id>
  <author>
    <name><![CDATA[Logesh and Geoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hand Rolling User Authorization]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/09/22/hand-rolling-user-authorization/"/>
    <updated>2014-09-22T13:25:26-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/09/22/hand-rolling-user-authorization</id>
    <content type="html"><![CDATA[<p>When writing a Rails app, you&rsquo;ll almost always have to employ some form of user authorization. Peeps wanna be able to sign in and see their personal awesomeness. And often enough, certain folks (admins, managers, <a href="http://2.bp.blogspot.com/-W303-_EO37M/TVw1bxG_gRI/AAAAAAAAAjY/cjHl5LiOe3c/s1600/math2.jpg" target="_blank">bad-ass M.C.s</a>) will have specialized permissions. Today, we&rsquo;re going to hand roll authorization into our web app.</p>

<!--more-->


<p>Popular Ruby gems for authorization include <a href="https://github.com/ryanb/cancan" target="_blank">CanCan</a>, <a href="https://github.com/RolifyCommunity/rolify" target="_blank">Rolify</a>, and my personal favorite, <a href="https://github.com/elabs/pundit" target="_blank">Pundit</a>. For the purposes of this walkthrough, we&rsquo;ll take some naming cues from the latter.</p>

<p>I&rsquo;m going to assume you&rsquo;ve already handled authentication somewhere in your app. For clarity, authentication is confirming the identity of a user, while authorization is determining the permissions of said user.</p>

<hr/>




<h3>The Task at Hand</h3>


<p>Let&rsquo;s say our app, I don&rsquo;t know, <a href="http://www.github.com/gschorkopf/frolfr/" target="_blank">keeps track of disc golf scorecards</a>. Each scorecard has many (usually 18) &ldquo;turns&rdquo;, which is an object that contains the number of shots and par for a given hole on a given course. Let&rsquo;s say the object looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db/schema.rb</span>
</span><span class='line'><span class="n">create_table</span> <span class="s2">&quot;turns&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;user_id&quot;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;hole_id&quot;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;score&quot;</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;par&quot;</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For our first task, let&rsquo;s say we only want the turn&rsquo;s player (user) to be able to <i>update</i> their own score / par / etc.</p>

<p>Let&rsquo;s get to work.</p>

<hr/>




<h3>Writing a Turn Policy Object</h3>


<p>As my buddy <a href="https://twitter.com/srbiv" target="_blank">Stafford</a> says, &ldquo;naming things is the hardest thing we do in programming.&rdquo; The key to building out good authorization is writing an understandable policy object.</p>

<p>In the thoughtful Pundit library, a policy object&rsquo;s method and class titles closely mirror the naming of Rails&#8217; RESTful resources and model conventions, respectfully.</p>

<p>Let&rsquo;s test drive this shiz.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/policies/turn_policy_spec.rb</span>
</span><span class='line'><span class="n">describe</span> <span class="no">TurnPolicy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span><span class="p">(</span><span class="ss">:policy</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="n">turn</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:current_user</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;User&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;the turn belongs to the current user&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:turn</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;Turn&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="n">current_user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;can update the turn&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">update?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;the turn belongs to another user&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:turn</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;Turn&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;User&#39;</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;can not update the turn&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">subject</span><span class="o">.</span><span class="n">update?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough! The spec creates a mock current user (the signed in user), a mock other user, and a mock turn. It tests that the current user can update a turn. That&rsquo;s all we really need to get started.</p>

<p>When building out the TurnPolicy class, I like to use Structs. They&rsquo;re simple, and we&rsquo;re looking for simplicity here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/policies/turn_policy.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TurnPolicy</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:current_user</span><span class="p">,</span> <span class="ss">:turn</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the naming: the class <code>TurnPolicy</code> mirrors the <code>Turn</code> model. We place the policy in a policies directory, and pass it our current user (which you will for any policy object you create) and a turn variable. Lovely.</p>

<p>Next, we&rsquo;ll need to build out an <code>update?</code> method. As you might have guessed based on the name, this can be used in many places: our <code>TurnsController#update</code> action, our turns&#8217; edit page, and anywhere else it&rsquo;s needed. Neat, eh?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/policies/turn_policy.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TurnPolicy</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:current_user</span><span class="p">,</span> <span class="ss">:turn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update?</span>
</span><span class='line'>    <span class="n">turn</span><span class="o">.</span><span class="n">user</span> <span class="o">==</span> <span class="n">current_user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! Now let&rsquo;s apply our <code>update?</code> method elsewhere.</p>

<hr/>




<h3>Applying our Object to Requests</h3>


<p>This is what our turn&rsquo;s update action looks like now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/turns_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TurnsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@turn</span> <span class="o">=</span> <span class="no">Turn</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Do the updating</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to raise some sort of error when a bad user attempts to reach this action. Let&rsquo;s make the error reuseable across all our controllers and put it in our ApplicationController. The error can be anything, as long as it prevents the user from doing any updating.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/application_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authorize</span><span class="p">(</span><span class="n">policy</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">KaboomError</span> <span class="k">unless</span> <span class="n">policy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;ve passed a method called <code>authorize</code> a boolean value, called <code>policy</code>. If the turn belongs to the user, all is well &mdash; otherwise &mdash; &ldquo;KABOOM.&rdquo;&#8221;</p>

<p>Let&rsquo;s put this method to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/turns_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TurnsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@turn</span> <span class="o">=</span> <span class="no">Turn</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">authorize</span> <span class="n">policy</span><span class="p">(</span><span class="n">turn</span><span class="p">)</span><span class="o">.</span><span class="n">update?</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Do the updating</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">policy</span><span class="p">(</span><span class="n">turn</span><span class="p">)</span>
</span><span class='line'>    <span class="no">TurnPolicy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="n">turn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We define our policy in a new method. We then use the <code>authorize</code> method and our <code>update?</code> method to authorize the action.</p>

<hr/>




<h3>Applying our Object to Views</h3>


<p>Finally, let&rsquo;s say we have a scorecard page, which is also our turns#index action. It&rsquo;s a simple table with all turns for that scorecard, as well as the ability to edit any score in place. Any user can view the scorecard; it&rsquo;s public. But only the turn&rsquo;s owner can edit a turn. In our TurnsController, we can turn our <code>policy</code> method into a nifty helper method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/turns_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TurnsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">helper_method</span> <span class="ss">:policy</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">policy</span><span class="p">(</span><span class="n">turn</span><span class="p">)</span>
</span><span class='line'>    <span class="no">TurnPolicy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="n">turn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So our view would could now something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/turns/index.html.slim</span>
</span><span class='line'><span class="o">-</span> <span class="vi">@scorecards</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">scorecard</span><span class="o">|</span>
</span><span class='line'>  <span class="n">tr</span>
</span><span class='line'>    <span class="n">td</span> <span class="o">=</span> <span class="n">scorecard</span><span class="o">.</span><span class="n">user_initials</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">scorecard</span><span class="o">.</span><span class="n">turns</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">turn</span><span class="o">|</span>
</span><span class='line'>      <span class="o">-</span> <span class="k">if</span> <span class="n">policy</span><span class="p">(</span><span class="n">turn</span><span class="p">)</span><span class="o">.</span><span class="n">update?</span>
</span><span class='line'>        <span class="n">td</span> <span class="o">=</span> <span class="n">link_to</span> <span class="n">turn</span><span class="o">.</span><span class="n">score</span><span class="p">,</span> <span class="n">turn_path</span><span class="p">(</span><span class="n">turn</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-</span> <span class="k">else</span>
</span><span class='line'>        <span class="n">td</span> <span class="o">=</span> <span class="n">turn</span><span class="o">.</span><span class="n">score</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a simple conditional that links to the turn page, or simply shows the turn&rsquo;s score.</p>

<hr/>




<h3>Conclusion</h3>


<p>Hand rolling your own tools can remove dependencies, allows programmers unfamiliar with certain libraries to check out the policies within your own source code, and is just fun to try out.</p>

<ul>
<li>GPS</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Pathetic Pacers]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/29/the-pathetic-pacers/"/>
    <updated>2014-05-29T17:05:49-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/29/the-pathetic-pacers</id>
    <content type="html"><![CDATA[<p><img src="http://four-point-play.herokuapp.com/images/lance.png" title="Lance Acting a Clown" alt="alt text" /></p>

<p>Herein lies my quick thoughts on the pathetic Indiana Pacers team, and why I need them to lose game 6 to enjoy watching the rest of the playoffs.</p>

<!--more-->


<p>I grew up without much of a sporting interest in basketball, let alone a rooting interest in my home-town Nets and Knicks; ergo, my passion for the sport extends to a love of most teams, and a general appreciation for fundamental, tough, skilled basketball.</p>

<p>In short: I want the clown car that drops the Pacers team off at American Airlines arena tomorrow to blow a tire and go careening off into South Beach. I need this bush-league playoff run to end.</p>

<p>I wanted it to end against the Hawks. I expected it to end against the Wizards. And now I <strong>need</strong> it to end against the Heat. Here&rsquo;s why.</p>

<p><b>The driver of the clown car: Frank Vogel.</b> It&rsquo;s hard to watch, frankly. This is what I mean by pathetic &ndash; pathos. I feel bad for the guy. He&rsquo;s in way over his head, and is barely keeping the show on the road. When George, Hibbert, and Stephenson talk to the media or fall apart on the court, it&rsquo;s clearly a reflection on the coach, his style, and the respect he commands.</p>

<p><b>Paul George&rsquo;s immaturity.</b> His 31 in the second half of game 5 was great. Does anyone expect him to repeat that? He&rsquo;s been hailed as a superstar this year. He&rsquo;s not. He&rsquo;s been hailed as their centerpiece, but he hardly brings the playoff room together. And his childish comments that the &ldquo;refs affected game 4&rsquo;s outcome&rdquo;? Did the refs blow you out by 12 points in a game that was never even that close? No. That was the Heat.</p>

<p><b>Lance Stephenson&rsquo;s trash talk.</b> Really? You&rsquo;re going to sit there as the &ldquo;occasionally 3rd best player&rdquo; on a team and try to get in the best player <b>in the league&rsquo;s</b> head? Two losses later I thought he&rsquo;d back down. But no: in game 5 he <b>blew in James&#8217; ear before a foul shot</b> and then <b>tried to listen in on a Heat huddle</b>. I know some basketball players didn&rsquo;t go to college, but surely y&#8217;all have graduated middle school, the very <b>last</b> time that stunt was socially acceptable. At least you&rsquo;ve inspired some great <a href="http://espn.go.com/sportsnation/post/_/id/11001550/lance-stephenson-blows-lebron-ear-sparks-funny-memes">memes</a>, Lance.</p>

<p>In short: finish &lsquo;em off, Heat. The first-seed Pacers are barely the sixth seed in Western Conference. Their brash childishness must be stopped. I&rsquo;d hate to watch a Pacers-versus <b>anyone</b> final. If they&rsquo;re going to act petulant, play out-of-their-league, and frankly be painful-to-watch, count me out. That&rsquo;s just the basketball fan in me.</p>

<ul>
<li>GPS</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 NBA Conference Finals - Part 1]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/20/2014-nba-conference-finals-part-1/"/>
    <updated>2014-05-20T16:50:54-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/20/2014-nba-conference-finals-part-1</id>
    <content type="html"><![CDATA[<p>Part 1 in I.I. and GPS&rsquo;s series on the NBA Conference Finals. We talk about whether the Heat should worry, Scotty Brook&rsquo;s tough decision, and Charles Barkley actin&#8217; a fool.</p>

<!--more-->


<p><strong>I.I.</strong>: The match-ups are set! On both sides the top two seeds are squaring off. A bipolar Pacers team stumbled to the conference finals against the Eastern conference favorite Heat. The MVP-led Thunder, minus Serge Ibaka, will take on Popovich&rsquo;s Spurs. So GeoSpec, what are your thoughts?</p>

<p>Will the Thunder&rsquo;s young guns wear out a veteran Spurs team that closed out the series against Portland with their bench? Will the Pacers surprise us by taking a couple games on the road against the Heat, as they are apt to do? And what about the big &lsquo;ol woman down in San Antonio? Will they come to some sort of truce with Charles Barkley?</p>

<p><strong>GPS</strong>: These are the match ups everyone wanted, right? A rematch of last year&rsquo;s Eastern Conference Finals, and a likely (sorry, Pacers) rematch of either the 2012 or 2013 NBA finals upcoming. Let&rsquo;s break it down. We&rsquo;ll pose some questions, we&rsquo;ll both give our take. Boom:</p>

<h4>Should the Heat be worried after dropping game 1 to the inconsistent Pacers?</h4>


<p><strong>GPS</strong>: I hate to say it: yes. But maybe not for the reasons you&rsquo;d think. It&rsquo;s really more about the Heat than the Pacers. The Heat have been coasting on production from LeBron and an occasional set piece (mostly Allen) for two series now. Where has Bosh been? Will the Heat&rsquo;s lack of size pose another problem? What about that game 7 home court advantage? Can they get another 81% shooting rampage from someone like Chris Andersen (2013)? These are all concerns. The Heat can win on the road. They have this year, and did last year against these same Pacers. But they&rsquo;re concerns regardless. The Pacers have been shaky, sure, and I still can&rsquo;t see them winning the series; but for whatever reason, the Pacers play significantly harder against the Heat.</p>

<p><strong>I.I.</strong>: You know, you&rsquo;re the second person today to tell me they can see the schizophrenic Pacers winning this series. If they end up in the Finals, I envision a sweep at the hands of the Spurs. The only entertaining part of that series would be Popovich coaching against his former protégé George Hill. The Pacers won 3 of their 4 against the Wizards on the road. Without much home court advantage on either side, I can see this series alternating until a Heat blowout in Game 7 at Indiana. Indiana&rsquo;s got size, but if Bosh and Chalmers start to pick it up, and Battier and Allen sink clutch 3s like they&rsquo;re paid to do, it will be hard for Paul George &amp; crew to keep up.</p>

<h4>What do you make of the Spurs shutting down the Thunder in Game 1?</h4>


<p><strong>I.I.</strong>: I don&rsquo;t envy the decisions Scotty Brooks has to make right now. I would hedge my bets on the side of sticking to small ball to match the firepower of the Spurs, which was how they overcame the Clippers. It was inexcusable for 2 OKC starters to put up goose eggs, and that&rsquo;s certainly going to change. But they miss Ibaka&rsquo;s offense because the smaller Reggie Jackson and Caron Butler are clearly overmatched against the defense of Splitter and Diaw.  Going big would require Durant and Westbrook to carry the offense, which, if the emotions are there, they do for two games tops.  The Thunder are not out of this by a long shot, having lost their last four road Game 1s, but it&rsquo;s not good to be lucky that you were only down 8 at the half. Also, the Spurs a whopping +30 with Danny Green on the floor, whaaaat.</p>

<p><strong>GPS</strong>: The Thunder might be missing Ibaka already. Any Spur could get to the rim at will in game 1. I can only imagine that continuing in game 2. The Spurs outscored the Thunder 66 to 32 in the paint. I couldn&rsquo;t believe that stat when I saw it.  Clearly playing small backfired for Scott Brooks. They&rsquo;ll have to get someone to replace Ibaka, or this series could turn ugly.</p>

<h4>Who do you have in Game 2 of each series?</h4>


<p><strong>GPS</strong>: Heat. I just don&rsquo;t believe the Pacers can win two in a row. They couldn&rsquo;t against the Hawks. They won&rsquo;t against the Heat. They&rsquo;re 4 and 4 at home this season, and can&rsquo;t imagine the Heat allowing 30 in another first quarter, as they did in a miserable game 1 showing.</p>

<p><strong>I.I.</strong>: Heat, with Bosh having a monster game and Lance Stephenson going 2 for 10. I&rsquo;m thinking the Spurs are gonna put another beatdown on OKC. I think the Thunder&rsquo;s coaching staff needs another game to figure out what to do against these guys. Maybe pull in some of those big ol&#8217; women down in San Antonio to crowd the paint.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Professionalism in Medicine]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/15/professionalism-in-medicine/"/>
    <updated>2014-05-15T13:39:00-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/15/professionalism-in-medicine</id>
    <content type="html"><![CDATA[<p>We are comporting ourselves in every situation, subconsciously considering our role, our expectations, the other parties’ expectations, and our prior experiences. In this coffee shop, I am a customer expecting quiet, because that is the unspoken pact I share with the afternoon crowd that frequents this place. I distinctly remember a philosophy course when I brought up how we are different people to different people, and a Laker purple-and-gold clad loudmouth was taken aback. She seemed to argue that it demonstrated purity to be the same to all people all the time. Maybe it is because we slip so effortlessly into these skins, that some people are unaware. A refusal to acknowledge this socially lubricating farce could underpin those stubborn people who can’t seem to get along with anyone. An inability to adapt can be a stressful way to live.</p>

<p><img src="http://four-point-play.herokuapp.com/images/comic1.jpg" title="Lola Versus" alt="alt text" /></p>

<!--more-->


<p>Many of our &ldquo;professional&rdquo; lives are a journey into learning the rules of how to behave in our workplace environs. How should I dress? What are the right things to do to make the boss see that I’m valuable? Should I be networking more? Some people find mentors whose habits they mimic to fit in better. It is an organic process, of how an individual integrates into a group.</p>

<p>So, professionalism is the attributes ascribed to a profession. It is gained as one transitions from being an amateur to going pro.  As a medical student about to enter his fourth and final year, at the conclusion of which people will start calling him and considering him “doctor”, it is of utmost concern.</p>

<p><img src="http://four-point-play.herokuapp.com/images/comic2.gif" title="Lola Versus" alt="alt text" /></p>

<p>At the top of our end-of-rotation evaluations, the preceptor is asked if the student exhibited professionalism. If the answer is no, nothing else matters, you’re retaking the rotation. And so daily, we student doctors fret over how we can best exude professionalism. The syllabus requires wearing a tie for males. But, save for the occasional hospital administrator/CEO, the med student is the best dressed person in a hospital of assumedly unprofessional slobs. Short white coats must be worn at all times. Aside from this being inexcusable as a proven infection-transmitting nidus, it doesn’t even convey your role anymore. Everyone from the social worker to the pharmacist now rocks the off-white coat.</p>

<p>What about learning professionalism from our superiors, the godly attending physicians whose shoes we will one day fill? In this hierarchical profession, they berate us for not being able to read their minds on how they want a patient presented. They knowingly grill us on the minutiae of some piece of medical knowledge, indignant when we fumble the answer. If they don’t treat the lowly students with respect, they surely wouldn’t be so cavalier with their patients. As you&rsquo;ve surely experienced, it is uncommon to be in a room where the doc spends more time looking at the patient than at a computer screen or chart. Unfortunately, an academic single-mindedness can thrive in this field. Empathy and rapport-building skills are never assessed for entry into medical school or residency.</p>

<p>The true essence of professionalism in medicine is the doctor who respects and treats a patient’s medical and psychological concerns. Most docs can process clinical signs, symptoms, and lab data to prescribe the recommended treatment. Magic medicine delivered through an IV does little to assuage the worry that wracks anyone inside the medical system juggernaut.  I did an experiment where I either introduced myself as a medical student or an undergraduate at my school’s health center. You might think that in the former, I received special treatment like a native in an ethnic restaurant. But, the fact mattered little. I felt like little more than an obstacle in their workflow, despite my attempts at forming  a connection by asking about their day, family, etc. I am guilty of this too. My main concern is often to get in and out of a room as quickly as I can so I can write my note and go home early.</p>

<p><img src="http://four-point-play.herokuapp.com/images/comic3.gif" title="Lola Versus" alt="alt text" /></p>

<p>One afternoon, my faculty mentor came by the hospital and showed me how a real pro does it. Unabashedly, he started with non-sequitur icebreakers like it was summer camp, instead of the scripted, remote “What brings you to the hospital/clinic/ER today?” And he pushes for answers.</p>

<blockquote><p>“I dunno…”</p>

<p>“Come on there must be something you like doing in your free time?”</p>

<p>“I guess I really enjoy playing with my 4yo daughter.”</p></blockquote>

<p>Suddenly, a particularly obstinate pain patient wasn’t feeling too bad anymore.</p>

<p>Medical professionalism is the relationship we are able to develop with our patients and our coworkers. It goes beyond making someone else feel warm &amp; fuzzy. In this field, a person’s healthy and vitality, and sometimes life or limb, is on the line. What matters most is being able to trust a patient’s testimony, them reciprocating the trust by allowing us to intervene, and the team trusting each other to get the job done quickly and correctly. While we are assessed by our starched white coats and biohazard neck ties, shouldn&rsquo;t some consideration be given to the professionalism that is demonstrated by treating a patient as more than a disease process? With little emphasis on its teaching, a paucity of mentors, and an overburdened healthcare system, the professional doctor, like the do-it-all family doc, might become a relic of the past.</p>

<ul>
<li>I.I.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Complex Validations From Your Models]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/10/refactoring-complex-validations-from-your-models/"/>
    <updated>2014-05-10T18:55:24-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/10/refactoring-complex-validations-from-your-models</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve probably heard the phrase &ldquo;fat models, skinny controllers&rdquo; before. The misconception of &ldquo;fat models&rdquo;: that it&rsquo;s okay for models to be very large and unwieldy. But when Rails models become a dumping ground for all things even tangentially related to the original class, it&rsquo;s probably time to trim off a few pounds.</p>

<!--more-->


<p>One way to do that is to pare away complex validations. For example, you might think it wise to drum up a method or two to handle passwords (minimum 8 characters! minimum one number! no weird symbols! etc.) So you throw these methods into the private domain of your User class, and call it a day. But you can (and should) probably move that logic elsewhere.</p>

<p>Let&rsquo;s start with what not to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:password_complexity</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_password_complexity</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have a number&quot;</span><span class="p">)</span>              <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*\d)/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have a lowercase letter&quot;</span><span class="p">)</span>    <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*[a-z])/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have an uppercase letter&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*[A-Z])/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have a special character&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">password</span> <span class="o">!~</span> <span class="sr">/(?=.*[\W])/</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:password</span><span class="p">,</span> <span class="s2">&quot;must have at least 8 characters&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">password</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s fine. It works. But is password complexity really the User&rsquo;s responsibilty? What if you had an Admin or Account or Enterprise model that required some sort of password? Surely you wouldn&rsquo;t <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">duplicate</a> your efforts there?</p>

<p>So let&rsquo;s simplify our User model down to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">complexity</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. Such elegant. Very simplicity. <a href="http://knowyourmeme.com/memes/doge">Amaze.</a></p>

<p>But how does this <code>complexity: true</code> work? Behind the scenes, we hide away that original logic that&rsquo;s not even really related to a User. You can inherit from the ActiveModel::EachValidator class, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/validators/complexity_validator.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ComplexityValidator</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:EachValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_each</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">attribute</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have a number&quot;</span><span class="p">)</span>              <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*\d)/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have a lowercase letter&quot;</span><span class="p">)</span>    <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*[a-z])/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have an uppercase letter&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*[A-Z])/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have a special character&quot;</span><span class="p">)</span>   <span class="k">if</span> <span class="n">value</span> <span class="o">!~</span> <span class="sr">/(?=.*[\W])/</span>
</span><span class='line'>    <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="s2">&quot;must have at least 8 characters&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a bit of Rails magic here. The &ldquo;Complexity&rdquo; title knows to create a complexity argument. Recall the User model line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">complexity</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s as easy as that!</p>

<p>And to tidy things up on the view end, consider the following for error handling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/users/new.html.erb</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s2">&quot;New Password&quot;</span><span class="p">,</span> <span class="n">error_method</span><span class="p">:</span> <span class="ss">:to_sentence</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>to_sentence is built into ActiveSupport, and helps us show all errors in a user-friendly way. <a href="http://apidock.com/rails/ActiveSupport/CoreExtensions/Array/Conversions/to_sentence">Check it out</a>.</p>

<p>Shout out to <a href="https://twitter.com/brandon_beacher">Brandon Beacher</a>, who taught me this nifty piece of refactoring.</p>

<ul>
<li>GPS</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Movie Review: Lola Versus]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/06/movie-review-lola-versus/"/>
    <updated>2014-05-06T19:06:00-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/06/movie-review-lola-versus</id>
    <content type="html"><![CDATA[<p><img src="http://four-point-play.herokuapp.com/images/Lola_Versus.jpg" title="Lola Versus" alt="alt text" /></p>

<p>Director: Daryl Wein<br/>
Runtime: 87 minutes<br/>
Cast: Greta Gerwig, Hamish Linklater, Zoe Lister-Jones<br/></p>

<!--more-->


<p>This hidden gem has been lying on my coffee table for two months after I picked it up for under five bucks at my local video store. It was part of a double feature purchase which also included Evil Dead, to be reviewed shortly. The sole reason it caught my eye was because of Ms. Gerwig’s mesmerizing performance as <a href="http://en.wikipedia.org/wiki/Frances_Ha">Frances Ha</a>’s titular heroine in one of the best movies of 2012. Director and co-writer Noah Baumbach left his wife and child during this collaboration, so it’s not just me that is caught in her magnetic field. And she will go on to reboot the How I Met Your Mother franchise by drudging through the story of HSMHH in HIMYD. HIMYM is one of my favorite sitcoms,  dare I say the Friends of my generation, and it has been endlessly renewed past its expiration date. Part of the reason, I presume, the finale felt so foreign to many viewers. My opinion, I loved how they ended things. But, it does a lot to sooth my anxieites that this spinoff will be anchored by this capable, indie star.</p>

<p>Before all her recent success, this film showcased her remarkable talent. It centers around the year between her 29th and 30th birthday, no small time in anyone’s life. She is joined in NYC by romantic interest Luke (Joel Kinnaman), best friend Alice (Zoe Lister Jones), and male-best-friend-who-obviously-has-a-crush-on-her Henry (Hamish Linklater!). You&rsquo;ve watched enough romantic comedies to know where this is going. She ends up with the more compatible best friend after making a few mistakes along the way. The writers refreshingly barrel through plot points to arrive at that ending halfway through the movie. This would not have worked without the splendid ability of these actors to develop a quick, believable chemistry. The relationships are strained mainly due to the reluctance of these characters to communicate, all coming to culmination in a nervous breakdown. The strength of this film comes on the comedic half of its pursuits. The dialogue is clever and fresh, helped tremendously by the delivery of Gerwig and crew. Pay attention to the set pieces too, if you&rsquo;ve ever wondered what a happenstance prison architect has on his walls. If you like to complain about how Hollywood can&rsquo;t make a comedic film with female leads, check this one out.</p>

<p>While we get some fun situations in the story of Lola dealing with the stresses of her romantic life, I am left wondering why she constantly befuddles her own attempts at growth. It seems to be assumed that this how women her age in this culture deal with life. Her stagnation turns quickly into frustration for the viewer who has learned the lessons that romantic comedies have to teach us. &ldquo;You’re making all the classic mistakes!&rdquo;, you want to yell at the hapless girl. Her parents&#8217; sage advice is the proxy for the omniscient viewer, which Lola promptly ignores in the scenes after they disappear. As she showed in the far superior, Frances Ha, which revolves around the same topics, one can mine the depths of the relationships between friends and lovers, while still being funny. I am scared that CBS execs saw this movie and thought that we could get Greta Gerwig easily drag out her romantic growth through 9 seasons as she did through this hour-and-a-half movie. It is a waste of her talent, but good exploitation of her appeal.</p>

<blockquote><p>“Whatever, chicks love old phones. They think I listen more or something.”</p></blockquote>

<p>-I.I.</p>
]]></content>
  </entry>
  
</feed>
