<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Four-Point Play]]></title>
  <link href="http://four-point-play.herokuapp.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://four-point-play.herokuapp.com/"/>
  <updated>2014-09-13T12:28:48-04:00</updated>
  <id>http://four-point-play.herokuapp.com/</id>
  <author>
    <name><![CDATA[Logesh and Geoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Facade Pattern in Ruby]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/06/12/the-facade-pattern-in-ruby/"/>
    <updated>2014-06-12T13:25:26-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/06/12/the-facade-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>A few months ago I started implementing a pattern that I picked up from some fellow <a href="http://www.bignerdranch.com">Nerds</a>. I sort of blindly used it, not taking the time to figure out why I liked it so much (and not even knowing it had a name) until <a href="https://twitter.com/charliebomber">Charlie</a> pressed me for the big question: &ldquo;great, but why?&rdquo;</p>

<p>Turns out, it does have a name (duh), and that name is the <a href="http://en.wikipedia.org/wiki/Facade_pattern">facade pattern</a>.</p>

<!--more-->


<p>Let me give you an example. I recently built an app for uploading and sharing your schedule for the Bonnaroo Music Festival. Here&rsquo;s the (gist of a) class that creates schedules:</p>

<p>```ruby
class BonnarooSchedule
  attr_reader :user, :profile_name, :document</p>

<p>  def self.upload(params)</p>

<pre><code>new(params).upload
</code></pre>

<p>  end</p>

<p>  def initialize(params)</p>

<pre><code>@document = params[:document]
@profile_name = params[:profile_name]
@user = params[:user]
</code></pre>

<p>  end</p>

<p>  def upload</p>

<pre><code>events.each do |event|
  if show = Show.find_by(artist_name: artist_name(event))
    # Create the ScheduleShow
  end
end
</code></pre>

<p>  end</p>

<p>  private
  # Some private methods (slike events and artist_name) that
  # make my life easier
end</p>

<p>```</p>

<p>Here&rsquo;s the full <a href="http://www.github.com/gschorkopf/roo-pals" target="_blank">open source project</a>, which I intend to share in a future blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Complex Validations From Your Models]]></title>
    <link href="http://four-point-play.herokuapp.com/blog/2014/05/10/refactoring-complex-validations-from-your-models/"/>
    <updated>2014-05-10T18:55:24-04:00</updated>
    <id>http://four-point-play.herokuapp.com/blog/2014/05/10/refactoring-complex-validations-from-your-models</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve probably heard the phrase &ldquo;fat models, skinny controllers&rdquo; before. The misconception of &ldquo;fat models&rdquo;: that it&rsquo;s okay for models to be very large and unwieldy. But when Rails models become a dumping ground for all things even tangentially related to the original class, it&rsquo;s probably time to trim off a few pounds.</p>

<!--more-->


<p>One way to do that is to pare away complex validations. For example, you might think it wise to drum up a method or two to handle passwords (minimum 8 characters! minimum one number! no weird symbols! etc.) So you throw these methods into the private domain of your User class, and call it a day. But you can (and should) probably move that logic elsewhere.</p>

<p>Let&rsquo;s start with what not to do:</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  validate :password_complexity</p>

<p>  private</p>

<p>  def validate_password_complexity</p>

<pre><code>errors.add(:password, "must have a number")              if password !~ /(?=.*\d)/
errors.add(:password, "must have a lowercase letter")    if password !~ /(?=.*[a-z])/
errors.add(:password, "must have an uppercase letter")   if password !~ /(?=.*[A-Z])/
errors.add(:password, "must have a special character")   if password !~ /(?=.*[\W])/
errors.add(:password, "must have at least 8 characters") if password.length &lt; 8
</code></pre>

<p>  end
end
```</p>

<p>And that&rsquo;s fine. It works. But is password complexity really the User&rsquo;s responsibilty? What if you had an Admin or Account or Enterprise model that required some sort of password? Surely you wouldn&rsquo;t <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">duplicate</a> your efforts there?</p>

<p>So let&rsquo;s simplify our User model down to this:</p>

<p>``` ruby</p>

<h1>app/models/user.rb</h1>

<p>class User &lt; ActiveRecord::Base
  validates :password, complexity: true
end
```</p>

<p>Wow. Such elegant. Very simplicity. <a href="http://knowyourmeme.com/memes/doge">Amaze.</a></p>

<p>But how does this <code>complexity: true</code> work? Behind the scenes, we hide away that original logic that&rsquo;s not even really related to a User. You can inherit from the ActiveModel::EachValidator class, like so:</p>

<p>``` ruby</p>

<h1>app/validators/complexity_validator.rb</h1>

<p>class ComplexityValidator &lt; ActiveModel::EachValidator
  def validate_each(record, attribute, value)</p>

<pre><code>record.errors.add(attribute, "must have a number")              if value !~ /(?=.*\d)/
record.errors.add(attribute, "must have a lowercase letter")    if value !~ /(?=.*[a-z])/
record.errors.add(attribute, "must have an uppercase letter")   if value !~ /(?=.*[A-Z])/
record.errors.add(attribute, "must have a special character")   if value !~ /(?=.*[\W])/
record.errors.add(attribute, "must have at least 8 characters") if value.length &lt; 8
</code></pre>

<p>  end
end
```</p>

<p>There&rsquo;s a bit of Rails magic here. The &ldquo;Complexity&rdquo; title knows to create a complexity argument. Recall the User model line:</p>

<p><code>ruby
validates :password, complexity: true
</code></p>

<p>It&rsquo;s as easy as that!</p>

<p>And to tidy things up on the view end, consider the following for error handling:</p>

<p>``` ruby</p>

<h1>app/views/users/new.html.erb</h1>

<h1>&hellip;</h1>

<p>= f.input :password, label: &ldquo;New Password&rdquo;, error_method: :to_sentence</p>

<h1>&hellip;</h1>

<p>```</p>

<p>to_sentence is built into ActiveSupport, and helps us show all errors in a user-friendly way. <a href="http://apidock.com/rails/ActiveSupport/CoreExtensions/Array/Conversions/to_sentence">Check it out</a>.</p>

<p>Shout out to <a href="https://twitter.com/brandon_beacher">Brandon Beacher</a>, who taught me this nifty piece of refactoring.</p>

<ul>
<li>GPS</li>
</ul>

]]></content>
  </entry>
  
</feed>
